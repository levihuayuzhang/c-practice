cmake_minimum_required(VERSION 3.22.1)

if (PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR)
    message(STATUS "WARN: PROJECT_BINARY_DIR == PROJECT_SOURCE_DIR")
endif()

set(CMAKE_CXX_EXTENSIONS OFF)
if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "default set CMAKE_BUILD_TYPE to Release")
    set(CMAKE_BUILD_TYPE Release)
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "DEBUG MODE")
endif()

if (NOT MSVC)
    find_program(CCACHE_PROGRAM ccache)
    if (CCACHE_PROGRAM)
        message(STATUS "Found CCache: ${CCACHE_PROGRAM}")
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM})
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE_PROGRAM})
    endif()
endif()

set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# set(CMAKE_CXX_COMPILER clang++)
# enable_language(CXX)

project(c-practice CXX C)

# To mix using LLVM from homebrew with MacOS system header and libs, enable following and choose llvm compiler while configure
# SET(CMAKE_PREFIX_PATH /opt/homebrew/opt/llvm/lib/cmake/)
# SET(LLVM_DIR /opt/homebrew/opt/llvm/lib/cmake/llvm)
# find_package(LLVM REQUIRED CONFIG)
# message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
# message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
# message(STATUS "Using LLVM_TOOLS_BINARY_DIR: ${LLVM_TOOLS_BINARY_DIR}")
# message(STATUS "Using LLVM_INCLUDE_DIRS: ${LLVM_INCLUDE_DIRS}")
# message(STATUS "Using LLVM_DEFINITIONS: ${LLVM_DEFINITIONS}")
# message(STATUS "Using LLVM_TOOLS_BINARY_DIR: ${LLVM_TOOLS_BINARY_DIR}")
# list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
# message(STATUS "Using CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
# separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS})
# add_definitions(${LLVM_DEFINITIONS_LIST}) # superseded (https://cmake.org/cmake/help/latest/command/add_definitions.html)
# add_compile_definitions(${LLVM_DEFINITIONS})
# include_directories(${LLVM_INCLUDE_DIRS})
# add_compile_options()

add_subdirectory(hello)
# add_subdirectory(simple-threadpool-c)
add_subdirectory(simple-threadpool-cpp)
add_subdirectory(unix-file-io-test)
add_subdirectory(socket)